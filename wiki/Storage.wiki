#summary All about storage and DB.
#labels Phase-Deploy,Phase-Implementation

= Хранилище =
----
== Установка и настройка MongoDB ==
=== Сервер MongoDB ===
_Всё очень просто и сводится к обычной распаковке архива и запуску, но все же:_
 # Скачиваем последнюю стабильную версию под свою систему с [http://www.mongodb.org/downloads официального сайта] MongoDB. Мы используем версию [http://fastdl.mongodb.org/linux/mongodb-linux-i686-1.6.3.tgz 1.6.3-linux32bit].
{{{
wget -O mongo.tgz http://fastdl.mongodb.org/linux/mongodb-linux-i686-1.6.3.tgz
}}}
 # Распаковываем содержимое архива.
{{{
tar xzf mongo.tgz
}}}
 # Переходим в распакованный каталог _mongodb-linux-i686-1.6.3_
{{{
cd mongodb-linux-i686-1.6.3
}}}
 # Создаем директорию, в которой будет храниться наша база.
{{{
mkdir data
}}}
 # Запускаем сервер базы данных, указывая желаемую директорию с базой (параметр --dbpath)
{{{
./bin/mongod --dbpath data
}}}

=== MongoDB & Java ===
Для взаимодействия с сервером MongoDB из нашей Java-программы, необходимо скачать [http://github.com/mongodb/mongo-java-driver/downloads Java-драйвер].<br>
Мы пользуемся последней на данный момент версией - [http://github.com/downloads/mongodb/mongo-java-driver/mongo-2.2.jar mongo-2.2.jar]

Затем полученный .jar файл, нужно либо положить в ваш _classpath_, либо подключить его в вашей IDE.

Например в _eclipse_, это можно сделать в параметрах вашего проекта:
 _Project - Properties - Java Build Path - Libraries - Add External JARs_
----
== Основные классы ==
_Данные классы представляют основные сущности объектов, хранимых в базе._

===Город - `Type: City`===
{{{
 Название - Name : String
 Описание - Description : String
 Координаты - Coordinates : Point2D.Double
 Фотографии - Photos : ArrayList<String>
 Ключевые слова - KeyWords : ArrayList<String>
}}}

===Архитектурная Достопримечательность - `Type: ArchAttraction`===
{{{
 Название - Name : String
 Описание - Description : String
 Координаты - Coordinates : Point2D.Double
 Фотографии - Photos : ArrayList<String>
 Ключевые слова - KeyWords : ArrayList<String>
 Город - City : ObjectId
 Дата основания - Date : Date
 Архитектор - Architect : String
 Цена - Cost : String
 Адрес - Address : String
}}}

===Природная Достопримечательность - `Type: NaturalAttraction`===
{{{
 Название - Name : String
 Описание - Description : String
 Координаты - Coordinates : Point2D.Double
 Фотографии - Photos : ArrayList<String>
 Ключевые слова - KeyWords : ArrayList<String>
 Ближайший город - City : ObjectId
}}}

===Отель - `Type: Hotel`===
{{{
 Название - Name : String
 Описание - Description : String
 Координаты - Coordinates : Point2D.Double
 Фотографии - Photos : ArrayList<String>
 Ключевые слова - KeyWords : ArrayList<String>
 Город - City : ObjectId
 Сайт - Website : String
 Тип Номеров - Rooms : String
}}}

===Кафе - `Type: Cafe`===
{{{
 Название - Name : String
 Описание - Description : String
 Координаты - Coordinates : Point2D.Double
 Фотографии - Photos : ArrayList<String>
 Ключевые слова - KeyWords : ArrayList<String>
 Город - City : ObjectId
 Сайт - Website : String
 Музыка - Music : String
}}}

----
== Основные методы взаимодействия с базой ==
_Методы, предоставляющие возможность добавления, удаления и редактирования элементов базы._

Все описанные методы являются *статическими* и принадлежат классу `DataBase`

====Основные общедоступные статические константы:====
{{{
//Адрес сервера MongoDB по умолчанию (localhost)
DataBase.DB_SERVER_ADDRESS : String

//Номер порта сервера MongoDB по умолчанию (27017)
DataBase.DB_SERVER_PORT : int

//Название главной(чистой) базы (mainDB)
DataBase.MAIN_DB_NAME : String

//Название сырой(грязной) базы (dirtyDB)
DataBase.DIRTY_DB_NAME : String
}}}

====Установка соединения с сервером MongoDB и подключение к *сырой* базе.====
{{{
void DataBase.connectToDirtyBase();
}}}

====Установка соединения с сервером MongoDB и подключение к *главной(чистой)* базе.====
{{{
void DataBase.connectToMainBase();
}}}

====Переключение на заданную базу.====
{{{
void DataBase.switchBaseTo(String dbName);
}}}

====Печать на стандартный вывод всего содержимого базы.====
{{{
void DataBase.printAll();
}}}

====Добавление в базу. Возвращает id добавленного в базу объекта.====
{{{
ObjectId DataBase.add(DBWrapper storageObject);
}}}

====Получение объекта из базы, по его id. Если объекта с указанным id не найдено, то возвращается null.====
{{{
DBWrapper getDBObjectById(ObjectId id);
}}}

====Получение списка из всех элементов базы====
{{{
ArrayList<DBWrapper> getAllDBObjects();
}}}

====Получение списка из городов имеющихся в базе====
{{{
ArrayList<DBWrapper> getAllCities();
}}}

====Получение списка из всех элементов базы, заданного типа====
{{{
ArrayList<DBWrapper> getAllWithType(String type);
}}}

====Получение id города, по его названию. Если город не найден, то возвращается null.====
{{{
ObjectId DataBase.getCityIdByName(String cityName);
}}}

----
== Пример использования ==
_Пример использования вышеописанных методов и классов._

Перед запуском программы, незабываем поднять у себя сервер базы по описанной выше схеме.

{{{
//Подключаем все необходимые классы хранилища.
import ru.amse.agregator.storage.ArchitectualAttraction;
import ru.amse.agregator.storage.City;
import ru.amse.agregator.storage.DataBase;

import java.awt.geom.Point2D.Double2D;
import java.util.ArrayList;
import java.util.Date;
import org.bson.types.ObjectId;

public class Example {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        DataBase.connectToDirtyBase();

        //Создаём новый объект-контейнер.
        DBWrapper someCity = new DBWrapper();
        
        //Обязательно указываем тип сущности!
        someCity.setType(DBWrapper.TYPE_CITY);
        
        someCity.setName("Рим");
        someCity.setPhoto("images/rim.jpg");
        someCity.setCoordinates(new Point2D.Double(1220.32432,10.234324));
        someCity.setDescription("Описание Рима");
        //ключевые слова
        ArrayList<String> stringsArray = new ArrayList<String>();
        stringsArray.add("beautiful");
        stringsArray.add("city");
        stringsArray.add("rim");
        stringsArray.add("Рим");
        someCity.setKeyWordsArray(stringsArray);
        
        //Добавляем созданный город в базу и объекту автоматически доабвляется поле id
        DataBase.add(someCity);
        
        //---------------
        
        //Создаём новую архитектурную достопримечательность.
        DBWrapper someArchAttr = new DBWrapper();
        
        //Обязательно указываем тип сущности!
        someArchAttr.setType(DBWrapper.TYPE_ARCH_ATTRACTION);
        
        someArchAttr.setName("Колизей");
        
        //Несколько фотографий.
        ArrayList<String> photosArray = new ArrayList<String>();
        photosArray.add("images/kolizey_im1.jpg");
        photosArray.add("images/kolizey_im2.jpg");
        photosArray.add("images/kolizey_im3.jpg");
        photosArray.add("images/kolizey_im4.jpg");
        someArchAttr.setPhotosArray(photosArray);
        
        //указываем город.
        someArchAttr.setCityById(someCity.getId());
        //someArchAttr.setCityByName("Рим"); - так тоже можно. но если известно id то лучше через него.
        
        someArchAttr.setCoordinates(new Point2D.Double(10.324234,1022.24234));
        someArchAttr.setDescription("Kolizey description");
        
        //ключевые слова
        ArrayList<String> keyWordsArray = new ArrayList<String>();
        keyWordsArray.add("rim");
        keyWordsArray.add("kolizey");
        keyWordsArray.add("keyword3");
        someArchAttr.setKeyWordsArray(keyWordsArray);
        
        someArchAttr.setAddress("Kolizey Street, 55");
        someArchAttr.setArchitect("Kirill K.");
        someArchAttr.setCost("100 $");
        someArchAttr.setDate(new Date(1990,7,8));
        
        //добавляем в базу.
        DataBase.add(someArchAttr);
        
        //Получаем все объекты базы:
        ArrayList<DBWrapper> all = DataBase.getAllDBObjects();
        for(DBWrapper obj : all){
            System.out.println("type: " + obj.getType());
            System.out.println("name:" + obj.getName());
            System.out.println("id: " + obj.getId());
            //........
            System.out.println("-------------");
        }
        
        System.out.println("-------------------------------");
        
        //Получаем все города:
        ArrayList<DBWrapper> cities = DataBase.getAllCities();
        for(DBWrapper city : cities){
            System.out.println("type: " + city.getType());
            System.out.println("name:" + city.getName());
            System.out.println("coords: " + city.getCoords());
            //........
            System.out.println("-------------");
        }
        
        System.out.println("-------------------------------");
        
        //Получаем все объекты указанного типа:
        ArrayList<DBWrapper> objsWithSelectedType = DataBase.getAllWithType(DBWrapper.TYPE_ARCH_ATTRACTION);
        for(DBWrapper obj : objsWithSelectedType){
            System.out.println("type: " + obj.getType());
            System.out.println("name:" + obj.getName());
            System.out.println("architect: " + obj.getArchitect());
            System.out.println("address: " + obj.getAddress());
            //........
            System.out.println("-------------");
        }
    }
}
}}}

----
== =) ==
Незабываем писать о всех найденных ошибках и неточностях в комменты или личку.
Также все что не понятно, тоже спрашивайте.

_Классы хранилища еще будут неоднократно изменяться и расширяться, следите за обновлениями и используйте в своих частях последнюю версию._

В скором времени появится внутренний GUI для просмотра и управления базой.