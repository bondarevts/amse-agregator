#summary Информация про часть проекта, отвечающую за кластеризацию и унификацию.

= Кластеризация =

Эта часть отвечает за обработку сырых данных и создание базы, готовой к индексации. Задача кластеризации найти дубликаты элементов, соединить их и поместить в базу в единственном экземпляре.

15.12.10

= Устройство и архитектура кластеризации =

Все классы, относящиеся к кластризации лежат в пакете ru.amse.agregator.quality.clusterization и его подпакетах. 

==Запуск==

Запустить класс ru.amse.agregator.quality.clusterization.ClusterizationProcess.

==Архитектура и классы компонента==

За взаимодействие частей компонента отвечает выше упомянутый класс ClusterizationProcess, который реализует всю высокоуровневую логику процесса. Собственно логика: 

1) Выкачать из базы часть объектов и подготовить их к кластризации. (реализовано методами базы)

2) Создать граф похожести между объектами. (абстрактный класс Graph и пока что его единственная реализация ArrayGraph, находятся в подпакете simgraph)

3) Напустить на граф алгоритм кластеризации (абстрактный класс Clusterizer и пока что его единственная реализация PartitionCluserizer, находятся в основном пакете)

4) На выходе 3его шага получаем набор кластеров (классы ClusterStorage и ArrayStorage в подпакете clusterstorage)

5) Набор класстеров передаётся в класс MergeProcess(подпакет merge), где кластеры соединяются в единый объект и добавляются в базу.

Далее повторить весь процесс для другого набора объектов.


===Метрика===


За сравнение объектов при создании графа отвечает класс Metric, есть 2 его реализации: NameMetric простая метрика сравнивающая лишь имена объектов, StandardMetric сравнивает также имена связей (если таковые имеются). (находятся в подпакете metric)


===Процесс соединения===

Высокоуровневую логику этого процесса реализует класс MergeProcess. Этот класс применяет на вход алгоритм мерджа (реализованный классом ClusterMerger), который соединяет весь кластер и единственный объект, и затем полученный объект добавляет в базу.

Текущая имплементация ClusterMerger - класс ObjectMerger работает так:

Есть множество потомков класса AttributeMerger, который является абстрактным алгоритмом, отвечающим за обработку одного атрибута (поля объекта базы). ObjectMerger знает каким AttributeMerger'ом обрабатывать какой атрибут и занимается фактически только этим.
На данный момент реализованы следующие AttributeMerger'ы:

1) CountryIdMerger, ContinentIdMerger, CityIdMeger отвечают за обработку связей в базе

2) CoordinateMerger - обработка координат

3) StringListMerger - соединяет списки строк, например списки ключевых слов или url

4) StringMerger - соединяет строки

5) DoNothingMerger - ничего не делает, нужен для служебных или пока не обрабываемых полей

6) DesciptionMerger - соединяет описания.

===DesciptionMerger===

Этот класс реализует сравнение по отпечаткам(класс Fingerprint) на основе частотных словарей(класс FrequencyList). Текущая реализация сравнивает множества слов в описаниях и на основании этого делается вывод о похожести описаний (при этом фильтруются наиболее часто встречаемые слова, за это отвечают классы TextFingerprinter и DescriptionFingerprinter).

=Что в ближайших планах=

1) Попробовать использовать стеммер при составлении частотных словарей, сравнить результаты.

2) Написать простейшую оценку качества и отсеивать объекты, для которых заведомо известно, что при кластрезации их будет сложно определить в нужный кластер. 
