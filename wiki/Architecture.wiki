#Здесь мы решаем и обсуждаем как взаимодействуют наши кусочки кода.

= Архитектура =

Общая схема:

http://dl.dropbox.com/u/12699885/mainScheme.png

Наша архитектура состоит из следующих компонент:
 * Miner
 * Хранилище
 * Качество + Ранжирование
 * Индексация + Поиск
 * GUI (для пользователя)

== Ответственность компонент ==
==Miner==

Miner - программа запускаемая с некоторой периодичностью (пример: раз в сутки). Задача майнера собрать интересующий нас данные из сети. Собранные данные кладуться в "сырую базу", через методы предоставленные хранилищем. Содержит внутренний UI, обеспечивающий возможность оценки качества собранных данных. Так же имеет свое хранилище метаинформации (пример: конфигурационные файлы). Данные приносимые Miner'ом в хранилище уже унифицированы. Для добавление данных в хранилище используються реализованный хранилищем интерфейс. Используемая технология: Web-Harvester.
Подробнее тут: ссылка.

==Хранилище==

Хранилище - обеспечивает хранение и доступ к собранной информации. Состоит из двух баз: Сырой и Главной. Позволяет добавлять новую информацию в базу, получать и редактировать имеющуюся. Также Хранилище должно реализовать внутренний UI, предоставляющий возможность просмотра, оценки и редактирования(?) хранимой информации.  В качестве базы данных используеться MongoDB.
Подробнее про Хранилище [http://code.google.com/p/amse-agregator/wiki/Storage здесь]

==Качество/Кластеризация==
Задача данного компонента состоит в обработке данных в "Сырой" базе и последующий ее перенос в  "Главную". Пример: Взять всю имеющуюся у нас информацию про Рим, объеденить описания, выделить среди них наиболее полное(главное).
Для досутпа к базе используеть реализованный хранилищем интерфейс.
Подробнее про Качество ссылка.

==Индексация и Поиск==
Индексирует *главную* базу, обрабатывает запросы поступающие от GUI. Индексирует только те данные, которые обработаны "Качеством и кластеризацией". Для решения данной задачи будет использован Lucene - текстовый поисковый движок. Здесь у нас 2 компоненты: Индексатор - работает с некоей периодичностью, обновляет свой индекс если в Хранилище("Главной базе") появились новые, непроиндексированные данные. И компонента обработки запросов из GUI - я вижу это как некий интерфейс(набор классов) для поиска по созданному индексу, который будет использоваться GUI.
Подробнее про Индексацию ссылка.

==Gui==
Реализует внешний интерфейс пользователя.