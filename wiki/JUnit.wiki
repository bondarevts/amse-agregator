#summary Тестирование классов в проекте

= Введение =

Для тестирования классов в java применяется модуль junit. 
В проекте будет использоваться junit версии 4.

= Использование =

Рассмотрим пример класса, подлежащего тестированию:
{{{
public class Summator {
    private int first;
    private int second;

    public Summator() {
        first = 0;
        second = 0;
    }

    public void setX(int x) {
        first = x;
    }

    public void setY(int y) {
        second = y;
    }

    public int getSum() {
        return first + second;
    }
}
}}}

Для того, чтобы написать тестирующий класс к нему, нужно создать новый класс (обычно в пакете test и названием SummatorTest), к которому подключить:
{{{
import org.junit.Test;
}}}

Рассмотрим код тестирующего класса SummatorTest:
{{{
import org.junit.Test;
import org.junit.Before;

import static junit.framework.Assert.assertEquals;

public class SummatorTest {
    private Summator s;

    @Before // Указывает на тот код, который выполнится перед каждым тестом
    public SummatorTest() {
        s = new Summator();
    }

    @Test // Указывает на то, что следующая за ним метод является тестирующим
    public void testGetSum1() {
        assertEquals(s.getSum(), 0); // проверка на равенство
    }

    @Test
    public void testGetSum2() {
        s.setX(3);
        assertEquals(s.getSum(), 3);
    }

    @Test
    public void testGetSum3() {
        s.setY(5);
        assertEquals(s.getSum(), 5);
    }

    @Test
    public void testGetSum4() {
        s.setX(4);
        s.setY(5);
        assertEquals(s.getSum(), 9);
    }
}
}}}

После запуска этого класса будет выдано сообщение о том, какие тесты выполнились успешно, а какие - нет. В данном случае будут выполнены все тесты.<br>
<br>
В одном методе может  быть несколько условий assert.

== Виды методов assert ==
`assertEquals` - проверяет на эквивалентность первый и второй параметры, тест считается пройденным, если два параметра эквивалентны<br>
`assertTrue` - тест пройден, если утверждение истинно<br>
`assertFalse` - утверждение должно быть ложным<br>

== Метки методов тестового класса ==
`@BeforeClass` - метод выполняется один раз для всего тестового класса. Может использоваться, например, для подключения к базе.<br>
`@AfterClass` - метод выполняется один раз после выполнения всех тестов для класса. Может выполнять, например, закрытие соединения с базой.<br>
`@Before` - метод выполняется перед каждым тестовым методом. Может служить, например, для инициализации переменных класса<br>
`@After` - метод выполняется после каждого тестового метода. Может служить, например, для удаления файлов, использованных в ходе работы тестов.<br>
`@Test` - метка метода, являющегося тестом.<br>
<br>
Существует возможность тестировать на длительность выполнения метода, для этого необходимо перед тестирующим методом указать:<br>
`@Test(timeout = 1000)`, где 1000 - это время в миллисекундах, отведенное на выполнение теста. Если он не укладывается в это время, то тест считается не пройденным.<br>
Также существует возможность тестирования метода на выброс определенного исключения. Для этого перед методом указывается метка:<br>
`@Test(expected = Exception.class)`. Тест считается выполненным, если исключение было брошено.<br>
<br>
Если тест временно ненужен, его можно игнорировать, указав метку `@Ignore`